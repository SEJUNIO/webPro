[클래스]
메소드 프로그램의 한계 
메소드를 이용하면 로직의 재사용이 가능하며 개발 효율적으로 가능
절차지향언어에서 중복된 로직을 메소드의 사용으로 인해 효율성 증가!
그러나, 한 문서 내 메소드 수가 많아질 수록 추후 유지 보수에 많은 어려움 발생함
[객체]
관련성 있는 데이터와 메소드가 함꼐 있는 구성체
[객체 모델링]
현실 세계나 추상적인 내용의 속성과 동작을 추려내어 소프트웨어 객체의 필드와 매서드로 정의해 나가는 과정
[객체와 클래스]
기계를 만들거나 할때 설계를하고 설계도 대로 기계를 만든다 예를들어 객체의 설계도면인 클래스를 만들고 객체를 만든다.
클래스는 객체를 만들기 위한 설계도라고도 할 수 있다.
[ 클래스 제작 ]
캡슐화 : 객체가 포함한 속성과 메서드는 객체간의 관계에 있어서 감추거나 권한에 따라 접근이 가능하게 처리하는 것
여기에 사용되는건 접근제어자가 있다.
1. 패키지명
2, 클래스명
3, 데이터 : 이 데이터는 생성자나 setter를 이용해서 초기화하지 않는다면 객체는 null, 숫자는 0, boolean은 false로 된다
4, 생성자 함수 : 클래스 명과 똑같이 리턴타입이 없는 메소드
5, 메소드
6, Getter & Setter
1. 생성자의 이해 : 생성자는 매개변수 있는 생성자와 매개변수 없는 생성자 등 여러 종류의 생성자를 가질 수 있다. 
생성자가 없을 때는 디폴트 생성자가 컴파일러 단계에서 자동 생성한다. 
한 개 이상의 생성자가 있으면 디폴트 생성자는 자동 생성되지 않는다.

[객체지향 프로그래밍의 특징]
1.캡슐화와 데이터 은닉
2. 다형성 : 같은모습이지만 다른 기능 (오버로딩)
3. 상속
