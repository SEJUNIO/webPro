[함수]

[익명함수]
함수는 코드의 집합을 나타내는 자료형. 익명 함수는 다음 형태로 만듬
﻿var functionVar = function() { }; // 함수 표현식
var functionVar = () => {}; // 화살표 함수

() => { . . . } // 매개변수가 없을 경우
x =>{ . . . } //매개변수가 한 개인 경우, 소괄호를 생략할 수 있다

- 익명 함수 생성과 출력 : 이름이 없으므로 변수에 넣어 사용.

[선언적 함수]
function 함수명 () {
}
﻿익명함수와 선언적 함수의 차이
<script>
 fun();
 function fun() { alert('함수  A'); } //웹브라우저는 script 태그 내부의 내용을 읽기전에 선언적 함수부터 읽는다

 function fun() { alert('함수 B'); } // 함수를 재정의 하면 기본의 함수는 없어지고, 재정의한 함수를 따른다

function 함수이름(매개변수, 매개변수, 매개변수){
//함수 코드
return 리턴값;
}

[매개변수]
자바스크립트는 함수를 생성할때 지정한 매개변수보다 많거나 적은 매개변수를 사용하는 것을 허용.
﻿원래 함수에서 선언된 매개변수보다 많게 사용하면 일반적으로 추가된 매개변수는 무시한다. 
원래 함수에서 선언한 매개변수보다 적게 사용하면 지정하지 않는 매개변수는 undefined로 입력된다.

﻿Array()함수 ; 빈 배열을 만든다.
Array(number) ; 매개변수만큼의 크기를 가지는 배열을 만든다.
Array(any, …, any); 매개변수를 배열로 만든다.

[가변인자함수]
매개변수를 선언된 형태와 다르게 사용했을 때, 매개변수를 모두 활용할 수 있는 함수
매개변수의 개수가 변할 수 있는 함수. ex/ Array()함수

[리턴값 return;]

[내부 함수 ; 함수 내부에 선언하는 함수]﻿

[자기호출함수]
(fuction(){ … })(); //다른 개발자에게 영향을 주지 않게 함수를 생성하자마자 호출하는 경우

﻿[콜백함수] 
자바스크립트에서는 함수도 하나의 자료형이므로 매개변수에 넣을 수 있다. 
매개변수에 넣어 전달된 함수를 콜백함수라 한다.

[함수를 리턴하는 함수]
함수가 자료형이므로 매개변수로도 전달할 수 있지만 함수를 리턴하는 함수도 만들 수 있다.
특정함수를 여러 번 수행하거나 이벤트 처리를 할 때 필요. 리턴하는 함수는 쓰는 가장 큰 이유는 클러저 때문.

[타이머 함수]
﻿setTimeout(function, millisecond) ; 일정시간 후 함수를 한번 실행
setInterval(function, millisecond) ; 일정시간마다 함수를 반복해서 실행
clearTimeout(id) ; setTimeout 중지
clearInterval(id); setInterval 중지

[인코딩 디코딩 함수]
﻿인코딩은 문자를 컴퓨터에 저장하거나 통신에 사용할 목적으로 부호화하는 방법이다
﻿encodeURIComponent(uriConponent) ; 대부부의 문자를 모두 인코딩
decodeURIComponent(encodedURI);   대부분의 문자를 모두 디코딩

[코드 실행 함수]
eval(수식이나 자바스크립코드);  자바 스크립 코드를 실행

[숫자 확인 함수]
﻿isFinite() ; number가 유한한 값인지 확인
isNaN() ; number가 NaN인지 확인

[숫자 변환 함수]
﻿<script>
        var won = '1000원';
        var dollar = '1.5$';
        alert(Number(won) + ' : ' + Number(dollar));
        alert(parseInt(won) + ' : ' + parseFloat(dollar));
    </script>