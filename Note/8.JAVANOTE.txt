[접근제한자] ( static / final )
public : 접근 제한 하지 않으며, 다른 모든 클래스에서 사용 가능
protected : 해당 클래스와 동일한 패키지에 있거나 상속 받은 클래스의 경우 사용 가능
default : 접근 제어자를 명시하지 않는 경우의 디폴트 접근제어자. 같은 패키지내에선 public의 권한을 갖고 접근가능
private : 해당 클래스만 이 멤버를 사용할 수 있음. 외부 객체 접근 불가.
static : 클래스 변수(정적변수, 공용변수)
객체변수는 개체가 생성될 때마다 각 객체 안의 속성 변수들이 생성되나 클래스 변수는 클래스로부터 생성된 객체들의 수와 상관없이 하나만 생성된다.
한 클래스로 부터 생성된 객체들은 클래스 변수를 공유함
클래스 변수를 이용하여 객체들 사이 통신에 사용되거나 객체들의 공통 속성 나타냄
객체들끼리 공유하고 싶은 정보가 있을 경우에 사용.
필요에 의해 클래스를 생성하고, 사용할 땐 new연산자를 통해 객체로 만들어 사용함.
static의 장점과 단점
객체 생성을 하지 않고도 사용할 수 있는데 생각해보면 가비지콜렉터 관리 밖에 있다보니 항상 메모리가 상주되어 있다.
즉! 프로젝트가 커지고 시스템이 오랜 시간 동안 돌아가게 된다면 시스템 운영속도가 점차적으로 느려질 수 있고 크게 본다면 재앙이 올 수도 있다.

[ 패키지 ] 
프로그래밍에서 여러 클래스를 관리하기 위해 기능적으로 영향을 미칠 수 있는 클래스끼리 묶어두고, 접근 범위 안에 효과적으로 호출하기 위해 사용한다.
예를들어 윈도우도 탐색기를 보면 무수히 많듯 자바도 패키지 안에 본다면 무수하게 많다. 
패키지 이름은 주로 도메인 주소를 역방향으로 만들어 다른 회사, 다른쪽에 중복되면 안되기 때문에최대한 유니크하며 개발팀에서 정한 규칙대로 만드는게 원칙입니다.
import는 패키지를 만들고 클래스를 제작을 하였는데 다른 패키지에서 클래스를 사용 할 수 있다.
다만 동일한 패키지에 있는 클래스는 import가 따로 필요없다.
옛날에는 메모리 환경이 안좋아 영향을 미쳤지만. 요즘은 메모리 환경이 좋아 이렇게 적용해서 사용한다.