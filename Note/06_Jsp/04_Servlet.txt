[Servlet]
동적 웹 어플리케이션 컴포넌트, java언어를 사용하여 웹프로그램 제작
javax.servlet.http.HttpServlet 클래스로부터 상속받아서 작성
클라이언트의 요청에 동적으로 작동하고, 응답은 html이용
java thread이용하여 동작 서블릿을 이용하는 가장 큰 장점 웹컴포넌트를 구성하는 다른 언어에 비해 서버의 부하가 많이 걸리지 않음.
mvc패턴에 Controller 부분 이용

서블릿은 doGet과 doPost 메소드 존재하며 doGet과 doPost안에 있는 내용이 실제로 사용자 클라이언트 웹브라우저에 출력되거나 실행
[get방식] - url값으로 정보가 전송되어 보안에 약함
주소와 매개변수를 붙여서 주소 표시줄에 입력하는 방법(?로 구분)
a 태그를 이용해서 페이지를 요청하는 경우
form태그에서 명시적으로 GET방식으로 요청하는 경우(method=”get”)

[post방식] - header를 이용해 정보가 전송되어 보안에 강함
form태그에서 명시적으로 POST 방식으로 요청(method=”post”)
데이터의 크기에 제한이 없으며 URL에 표시되지 않으므로 보안성이 우수
한글 파라미터 전달시 request.setCharacterEncoding(“utf-8”)추가
HttpServletRequest > 클라이언트의 요청 처리 객체
HttpServletResponse > 클라이언트에게 응답 처리 객체

[컨텍스트 패스(Context Path)] 
WAS(Web Application Server)에서 웹어플리케이션을 구분하기 위한 path. 해당 웹 어플리케이션이 이름. 
이클립스에서 프로젝트를 생성하면, 자동으로 server.xml에 추가된다.  
그러므로, 프로젝트를 삭제하고 다시 같은 이름의 프로젝트를 생성할 수 없다

[Servlet 작동순서]  
클라이언트에서 servlet요청이 들어 오면 서버에서는 servlet컨테이너를 만들고, 요청이 있을 때마다 스레드가 생성된다.
웹브라우저 → [웹서버] → [웹어플리케이션서버] → [Servlet 컨테이너 servlet객체생성, 쓰레드생성]

[한글처리할때]
Tomcat 서버의 기본 문자 처리 방식은 IOS-8859-1 방식 입니다. 따라서 개발자가 별도의 한글 인코딩을 하지 않으면 한글이 깨져 보이는 현상이 있습니다.
response객체인지, request객체인지 따라서 한글처리 방식에 차이가 있다.
response객체 : response.setContentType("text/html;charset=utf-8");
request객체(POST방식) : request.setCharacterEncoding("utf-8");



