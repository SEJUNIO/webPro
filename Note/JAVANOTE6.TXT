[메소드]
객체지향프로그램이 나오기 전 효율적인 프로그래밍을 위해 등장한 메소드
로직만 만들어 놓고, 그때 그때 데이터를 주면 메소드가 알아서 결과값을 반환하는 방식
[객체지향의 등장 배경과 이해]
메소드를 이용한 방식으로 개발자들은 아주 많은 효율성을 느끼게 되었다.
하지만, 메소드를 이용한 방식에도 한계는 있다.
데이터가 많아지고, 메소드가 많아짐에 따라 코드 양이 많아 지며, 어려워지기 시작했습니다.
이로써 등장한 방식이 객체지향 프로그래밍 입니다.
[객체]란 동일한 성질의 데이터와 메소드를 한곳에 모아두고
 필요한 곳에서 언제든지 이용할 수 있게 만들어 놓은 덩어리 입니다.
[메소드의 이해]
메소드는 작업을 수행하기 위한 명령문의 집합
어떤 값을 입력받고 처리하고 그 결과를 돌려준다(입력 받는값이 없을 수도 있고 결과를 돌려주지 않을 수도있다.
메소드의 장점과 작성지침 ; 반복적으로 수행되는 여러 문장을 메소드로 작성한다.
접근제한자 [static] 리턴type 메소드명([매개변수1, 매개변수2,..]){ 
//return이 없을 경우 리턴type은 void
	처리할 프로세스들
	[return 리턴값;]
}





