[인터페이스]
1. 작업명세서(작업지시서)
실제 구현된 것이 전혀 없는 기본 설계도
객체를 생성할 수 없고, 클래스 작성에 도움을 줄 목적
미리 정해진 규칙에 맞게 구현하도록 표준 제시
추상메서드와 상수 만을 멤버로 가짐
2. 다형성을 가능하게 함 (하나의 객체로 다양하게 많은 Type으로 만들 수 있다
3. 객체를 부속품화 (다양한 객체를 제품의 부속품처럼 개발자 마음대로 변경)
4. 사용법은 어렵지 않지만, 실제 개발에 적용시키기엔 쉽지 않다.
class 대신 interface를 사용한다
추상메소드와 상수만 존재한다
public interface 인터페이스이름 {
	public /* static final */ 타입 상수이름 = 값;
	public /* abstract */ 메서드 이름(매개변수 목록);  
모든 멤버 변수는 public static final 이어야 하며 대체로 static final은 생략
private는 불가 -상수나 메소드를 만들때 private 접근 제한자는 불가하다.
구현은 Implement 되는 클래스에서 합니다.
[다형성]
'여러 가지 형태를 가질 수 있는 능력'  객체가 다양하게 변할 수 있다
하나의 인터페이스를 사용하여 다양한 구현 방법 제공
하나의 클래스나 함수가 다양하게 동작함

메소드 overloading(중복정의) : 같은 클래스 내, 매개변수에 따라 오버로딩이라 할 수 있다.
컴파일러 입장에서는 기존에 없는 새로운 메서드를 정의하는 것(new)
메소드 다중정의 (같은 class에서 동일한 메소드가 매개변수를 달리 여러 개 존재

메소드 overriding(재정의) : 상속받은 메서드의 내용을 변경하는 것(change, modify)
메소드 재정의 : 부모클래스와 자식클래스에 동일한 method 존재(틀만 가져와 재정의)

※ 오버라이딩의 조건 : ① 선언부가 같아야 한다(이름, 매개변수, 리턴타입)
                  ② 접근제어자를 좁은 범위로 변경할 수 없다.
	             조상클래스 메서드가 protected라면 범위가 같거나 넓은 protected나 public으로만
인터페이스와 다중상속
Java는 다중상속이 불가 합니다
Java는 다중상속이 불가 합니다. 예전의 C++에서는 다중상속이 가능하였으나, 
java에서는 다중상속이 불가능 합니다. 이유는 C++에서 다중상속을 가능하게 하여 좋은 점도 있었으나, 
다중상속으로 인한 문제점도 많아서 C++에서 발전된 java 에서는 다중상속을 막았습니다